---
interface Feature {
  short: string;
  detail: string;
}

interface App {
  name: string;
  description: string;
  icon: string;
  color: string;
  features: (string | Feature)[];
}

interface Props {
  app: App;
}

const { app } = Astro.props;

// Check if this app has detailed features
const hasDetailedFeatures = app.features.length > 0 && typeof app.features[0] === 'object';
---

<div
  class="app-card-container"
  data-has-details={hasDetailedFeatures}
>
  <div class="app-card-flipper">
    <div class="app-card app-card-front" style={{ borderColor: app.color }}>
      <div class="coming-soon-ribbon">Coming Soon</div>

      {hasDetailedFeatures && (
        <button class="info-icon" aria-label="View detailed features">
          <svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
          </svg>
        </button>
      )}

      <div class="app-icon" style={{ backgroundColor: app.color }}>
        {app.icon.startsWith('/') ? (
          <img src={app.icon} alt={`${app.name} icon`} class="app-icon" />
        ) : (
          app.icon
        )}
      </div>
      <h2 class="app-name" style={{ color: app.color }}>
        {app.name}
      </h2>
      <p class="app-description">{app.description}</p>
      <ul class="app-features">
        {app.features.map((feature, index) => (
          <li key={index}>
            {typeof feature === 'string' ? feature : (feature as Feature).short}
          </li>
        ))}
      </ul>

      <div class="download-buttons">
        <button class="store-btn disabled" disabled>
          <svg class="store-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M18.71 19.5C17.88 20.74 17 21.95 15.66 21.97C14.32 22 13.89 21.18 12.37 21.18C10.84 21.18 10.37 21.95 9.1 22C7.79 22.05 6.8 20.68 5.96 19.47C4.25 17 2.94 12.45 4.7 9.39C5.57 7.87 7.13 6.91 8.82 6.88C10.1 6.86 11.32 7.75 12.11 7.75C12.89 7.75 14.37 6.68 15.92 6.84C16.57 6.87 18.39 7.1 19.56 8.82C19.47 8.88 17.39 10.1 17.41 12.63C17.44 15.65 20.06 16.66 20.09 16.67C20.06 16.74 19.67 18.11 18.71 19.5M13 3.5C13.73 2.67 14.94 2.04 15.94 2C16.07 3.17 15.6 4.35 14.9 5.19C14.21 6.04 13.07 6.7 11.95 6.61C11.8 5.46 12.36 4.26 13 3.5Z"/>
          </svg>
          <span>App Store</span>
        </button>

        <button class="store-btn disabled" disabled>
          <svg class="store-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z"/>
          </svg>
          <span>Google Play</span>
        </button>
      </div>
    </div>

    {hasDetailedFeatures && (
      <div class="app-card app-card-back" style={{ borderColor: app.color }}>
        <div class="coming-soon-ribbon">Coming Soon</div>

        <button class="close-icon" aria-label="Close detailed view">
          <svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
          </svg>
        </button>
        <ul class="app-features app-features-detailed">
          {app.features.map((feature, index) => (
            <li key={index}>{(feature as Feature).detail}</li>
          ))}
        </ul>
      </div>
    )}
  </div>
</div>

<style>
  .app-card-container {
    perspective: 1000px;
  }

  .app-card-flipper {
    position: relative;
    width: 100%;
    transition: transform 0.6s;
    transform-style: preserve-3d;
  }

  .app-card-container.flipped .app-card-flipper {
    transform: rotateY(180deg);
  }

  .app-card-front,
  .app-card-back {
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }

  .app-card-front {
    position: relative;
    visibility: visible;
  }

  .app-card-container.flipped .app-card-front {
    visibility: hidden;
  }

  .app-card-back {
    position: absolute;
    top: 0;
    left: 0;
    transform: rotateY(180deg);
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  .info-icon {
    position: absolute;
    top: 50%;
    right: 0.5rem;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
    color: var(--text-secondary);
  }

  .info-icon:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-50%) scale(1.1);
  }

  .app-features-detailed {
    font-size: 1rem;
    line-height: 1;
    margin-bottom: 0;
    margin-top: 0.5rem;
    overflow-y: auto;
    flex: 1;
    padding-right: 1.25rem;
    padding-left: 0.25rem;
    padding-top: 1.7rem;
  }

  .app-features-detailed li {
    padding: 0.25rem 0;
    margin-bottom: 0.1rem;
  }

  .app-card-back .app-features li {
    padding-left: 1.25rem;
  }

  .close-icon {
    position: absolute;
    top: 50%;
    right: 0.5rem;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
    color: var(--text-secondary);
  }

  .close-icon:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-50%) scale(1.1);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const containers = document.querySelectorAll('.app-card-container[data-has-details="true"]');

    containers.forEach(container => {
      const infoButton = container.querySelector('.info-icon');
      const closeButton = container.querySelector('.close-icon');

      if (infoButton) {
        infoButton.addEventListener('click', (e) => {
          e.stopPropagation();
          container.classList.add('flipped');
        });
      }

      if (closeButton) {
        closeButton.addEventListener('click', (e) => {
          e.stopPropagation();
          container.classList.remove('flipped');
        });
      }

      container.addEventListener('mouseleave', () => {
        container.classList.remove('flipped');
      });

      // Close when clicking outside the card
      document.addEventListener('click', (e) => {
        if (!container.contains(e.target)) {
          container.classList.remove('flipped');
        }
      });
    });
  });
</script>
